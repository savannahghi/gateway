name: Deployment

on: [push]
# on:
#   push:
#     branches: [main]

env:
 GCR_NAME: ${{ secrets.GCR_NAME }}
 GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
 PROJECT_ID: ${{ secrets.PROJECT_ID }}
 NAMESPACE: ${{ secrets.NAMESPACE }}
 RELEASE_NAME: ${{ secrets.RELEASE_NAME }}
 APP: ${{ secrets.APP }}
 REPLICA_COUNT: ${{ secrets.REPLICA_COUNT }}
 SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
 SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
 INGRESS_NAME: ${{ secrets.INGRESS_NAME }}
 INGRESS_HOST: ${{ secrets.INGRESS_HOST }}
 CERTIFICATE_NAME: ${{ secrets.CERTIFICATE_NAME }}
 TEST_LOGIN_SERVICE_URL: ${{ secrets.TEST_LOGIN_SERVICE_URL }}
 TEST_LOGIN_SERVICE_FLAVOUR: ${{ secrets.TEST_LOGIN_SERVICE_FLAVOUR }}
 TEST_SCHEMA_REGISTRY_URL: ${{ secrets.TEST_SCHEMA_REGISTRY_URL }}
 DEBUG: ${{ secrets.DEBUG }}
 CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
 CLUSTER_ZONE: ${{ secrets.CLUSTER_ZONE }}
 DOCKER_IMAGE_TAG: eu.gcr.io/$PROJECT_ID/$GCR_NAME:$GITHUB_SHA
 APQ_ENABLED: ${{ secrets.APQ_ENABLED }}
 SUBSCRIPTIONS_ENABLED: ${{ secrets.SUBSCRIPTIONS_ENABLED }}
 INTROSPECTION_ENABLED: ${{ secrets.INTROSPECTION_ENABLED }}
 PLAYGROUND_ENABLED: ${{ secrets.PLAYGROUND_ENABLED }}
 TESTING_SENTRY_DSN: ${{ secrets.TESTING_SENTRY_DSN }}
 APP_PORT: ${{ secrets.APP_PORT }}
 TEST_JAEGER_URL: ${{ secrets.TEST_JAEGER_URL }}
 SERVICE_PORT: ${{ secrets.SERVICE_PORT }}
 TEST_HOST_DOMAIN: ${{ secrets.TEST_HOST_DOMAIN }}
 READINESSS_PROBE_INITIAL_DELAY_SECONDS: ${{ secrets.READINESSS_PROBE_INITIAL_DELAY_SECONDS }}
 READINESSS_PROBE_PERIOD_SECONDS: ${{ secrets.READINESSS_PROBE_PERIOD_SECONDS }}
 LIVENESS_PROBE_INITIAL_DELAY_SECONDS: ${{ secrets.LIVENESS_PROBE_INITIAL_DELAY_SECONDS }}
 LIVENESS_PROBE_PERIOD_SECONDS: ${{ secrets.LIVENESS_PROBE_PERIOD_SECONDS }}

jobs:
  build_and_publish_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}

      # Build docker image
      - name: Build
        run: |-
          docker build -t eu.gcr.io/$PROJECT_ID/$GCR_NAME:$GITHUB_SHA .
      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker -q

      # Push image to Google Container Registry
      - name: Push
        run: |-
          docker push eu.gcr.io/$PROJECT_ID/$GCR_NAME:$GITHUB_SHA

  deployment_to_test:
    name: Deploy Registry to cluster
    runs-on: ubuntu-latest
    needs: [build_and_publish_image]
    steps:
      - name: Checkout working branches
        uses: actions/checkout@v2

      - name: Install helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      
      - name: Get cluster auth credentials
        run: |
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud.json
          gcloud auth configure-docker
          gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE --project $PROJECT_ID
      
      - name: Deploy Release on cluster
        run: |
          # install helm/upgrade helm chart
          helm upgrade ${{ secrets.RELEASE_NAME }} ./deployment/k8s-chart \
            --install \
            --debug \
            --namespace="${NAMESPACE}" \
            --set app.release_name="${RELEASE_NAME}" \
            --set app.name="${APP}" \
            --set app.project_id="${PROJECT_ID}" \
            --set app.namespace="${NAMESPACE}" \
            --set app.image=eu.gcr.io/$PROJECT_ID/$GCR_NAME:$GITHUB_SHA \
            --set app.project_id="${PROJECT_ID}" \
            --set app.name="gateway-app-test" \
            --set app.namespace="gateway-test-namespace" \
            --set app.replicaCount=1 \
            --set app.service.name="gateway-test-service" \
            --set app.service.namespace="gateway-test-namespace" \
            --set app.container.env.login_service_url="${TEST_LOGIN_SERVICE_URL}" \
            --set app.container.env.login_service_flavour="${TEST_LOGIN_SERVICE_FLAVOUR}" \
            --set app.container.env.schema_registry_url="${TEST_SCHEMA_REGISTRY_URL}" \
            --set app.container.env.debug="${DEBUG}" \
            --set app.container.env.apq_enabled="${APQ_ENABLED}" \
            --set app.container.env.service_check_health_enabled="false" \
            --set app.container.env.polling_enabled="true" \
            --set app.container.env.polling_interval="300000" \
            --set app.container.env.subscriptions_enabled="${SUBSCRIPTIONS_ENABLED}" \
            --set app.container.env.introspection_enabled="${INTROSPECTION_ENABLED}" \
            --set app.container.env.playground_enabled="${PLAYGROUND_ENABLED}" \
            --set app.container.env.sentry_dns="${TESTING_SENTRY_DSN}" \
            --set app.container.env.port="${APP_PORT}" \
            --set app.container.env.jaeger_url="${TEST_JAEGER_URL}" \
            --set app.service.port="${SERVICE_PORT}" \
            --set ingress.name="gateway-test-ingress" \
            --set ingress.annotations.tls.acme="true" \
            --set ingress.namespace="gateway-test-namespace" \
            --set ingress.spec.rules.pathType="Prefix" \
            --set ingress.annotations.acme.http_edit_in_place="true" \
            --set ingress.host="${TEST_HOST_DOMAIN}" \
            --set ingress.annotations.class="kong" \
            --set app.certificate.name="gateway-test-certificate" \
            --set app.certificate.acme.email="calvine.otieno@healthcloud.co.ke" \
            --set app.certificate.tls.acme="true" \
            --set app.certificate.issuer.name="letsencrypt-prod" \
            --set app.certificate.acme.server="https://acme-v02.api.letsencrypt.org/directory" \
            --set app.readinesss_probe_initial_delay_seconds="${READINESSS_PROBE_INITIAL_DELAY_SECONDS}" \
            --set app.readinesss_probe_period_seconds="${READINESSS_PROBE_PERIOD_SECONDS}" \
            --set app.liveness_probe_initial_delay_seconds="${LIVENESS_PROBE_INITIAL_DELAY_SECONDS}" \
            --set app.liveness_probe_period_seconds="${LIVENESS_PROBE_PERIOD_SECONDS}" \
            --set app.secrets.name="gateway-secrets" \
            --wait

  deploy_to_demo:
    name: Deploy demo Registry to cluster
    runs-on: ubuntu-latest
    environment:
      name: demo
    needs: [build_and_publish_image]
    
    steps:
      - name: Checkout working branches
        uses: actions/checkout@v3

      - name: Install helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      
      - name: Get cluster auth credentials
        run: |
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud.json
          gcloud auth configure-docker
          gcloud container clusters get-credentials gateway --zone ${{secrets.CLUSTER_ZONE}} --project ${{secrets.PROJECT_ID}}
      
      - name: Deploy Release on cluster
        run: |
          # install helm/upgrade helm chart
          helm upgrade ${{ secrets.RELEASE_NAME }} ./deployment/k8s-chart \
            --install \
            --debug \
            --namespace="${{ secrets.NAMESPACE }}" \
            --set app.release_name="${{ secrets.RELEASE_NAME }}" \
            --set app.name="${{ secrets.APP }}" \
            --set app.project_id="${{ secrets.PROJECT_ID }}" \
            --set app.namespace="${{ secrets.NAMESPACE }}" \
            --set app.image=eu.gcr.io/$PROJECT_ID/$GCR_NAME:$GITHUB_SHA \
            --set app.project_id="${{ secrets.PROJECT_ID }}" \
            --set app.replicaCount=1 \
            --set app.service.name="gateway-demo-service" \
            --set app.service.namespace="gateway-demo-namespace" \
            --set app.container.env.login_service_url="${{ secrets.STAGING_LOGIN_SERVICE_URL }}" \
            --set app.container.env.login_service_flavour="${{ secrets.STAGING_LOGIN_SERVICE_FLAVOUR }}" \
            --set app.container.env.schema_registry_url="${{ secrets.DEMO_SCHEMA_REGISTRY_URL }}" \
            --set app.container.env.debug="${{ secrets.DEBUG }}" \
            --set app.container.env.apq_enabled="${{ secrets.APQ_ENABLED }}" \
            --set app.container.env.service_check_health_enabled="false" \
            --set app.container.env.polling_enabled="true" \
            --set app.container.env.polling_interval="300000" \
            --set app.container.env.subscriptions_enabled="${{ secrets.SUBSCRIPTIONS_ENABLED }}" \
            --set app.container.env.introspection_enabled="${{ secrets.INTROSPECTION_ENABLED }}" \
            --set app.container.env.playground_enabled="${{ secrets.PLAYGROUND_ENABLED }}" \
            --set app.container.env.sentry_dns="${{ secrets.TESTING_SENTRY_DSN }}" \
            --set app.container.env.port="${{ secrets.APP_PORT }}" \
            --set app.container.env.jaeger_url="${{ secrets.TEST_JAEGER_URL }}" \
            --set app.service.port="${{ secrets.SERVICE_PORT }}" \
            --set ingress.name="gateway-demo-ingress" \
            --set ingress.annotations.tls.acme="true" \
            --set ingress.namespace="gateway-demo-namespace" \
            --set ingress.spec.rules.pathType="Prefix" \
            --set ingress.annotations.acme.http_edit_in_place="true" \
            --set ingress.host="${{ secrets.DEMO_HOST_DOMAIN }}" \
            --set ingress.annotations.class="kong" \
            --set app.certificate.name="gateway-demo-certificate" \
            --set app.certificate.acme.email="salaton@savannahinformatics.com" \
            --set app.certificate.tls.acme="true" \
            --set app.certificate.issuer.name="letsencrypt-prod" \
            --set app.certificate.acme.server="https://acme-v02.api.letsencrypt.org/directory" \
            --set app.readinesss_probe_initial_delay_seconds="${{ secrets.READINESSS_PROBE_INITIAL_DELAY_SECONDS }}" \
            --set app.readinesss_probe_period_seconds="${{ secrets.READINESSS_PROBE_PERIOD_SECONDS }}" \
            --set app.liveness_probe_initial_delay_seconds="${{ secrets.LIVENESS_PROBE_INITIAL_DELAY_SECONDS }}" \
            --set app.liveness_probe_period_seconds="${{ secrets.LIVENESS_PROBE_PERIOD_SECONDS }}" \
            --set app.secrets.name="gateway-secrets" \
            --wait
